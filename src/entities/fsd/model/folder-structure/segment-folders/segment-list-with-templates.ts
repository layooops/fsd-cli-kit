import type { FsdConfig } from "~/entities/config/lib/types/fsd-config.interface";
import type { Folder } from "~/entities/fsd/lib/types/folder-structure.interface";
import type { FsdSegment } from "~/entities/fsd/lib/types/fsd.interface";

import { fsdSegments } from "~/entities/fsd/lib/types/fsd.interface";
import { DEFAULT_SLICE_FILE_NAME } from "~/shared/lib/constants";

import {
  apiFolderWithTemplates,
  libFolderWithTemplates,
  modelFolderWithTemplates,
  uiFolderWithTemplates,
} from "./folders";
import { publicApiFolderWithTemplates } from "./folders/public-api-folder";

type SegmentList = Record<FsdSegment, Folder>;

export const fsdSegmentListWithTemplates = ({
  configOptions,
  sliceName = DEFAULT_SLICE_FILE_NAME,
}: {
  configOptions: FsdConfig;
  sliceName?: string;
}): SegmentList => {
  const { autogenerate, globalSettings, namingConvention } = configOptions;

  if (!autogenerate) {
    const autogeneratedSegments = fsdSegments.reduce((result, segment) => {
      result[segment] = [];
      return result;
    }, {} as SegmentList);
    return autogeneratedSegments;
  }

  const segments: SegmentList = {
    ui: uiFolderWithTemplates({
      configOptions: globalSettings,
      namingConvention,
      sliceName,
    }),
    model: modelFolderWithTemplates({
      configOptions: globalSettings,
      namingConvention,
      sliceName,
    }),
    lib: libFolderWithTemplates(),
    api: apiFolderWithTemplates({
      configOptions: globalSettings,
      namingConvention,
      sliceName,
    }),
    "public-api": publicApiFolderWithTemplates({
      configOptions: globalSettings,
      namingConvention,
      sliceName,
    }),
  };

  return segments;
};
